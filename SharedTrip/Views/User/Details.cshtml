@using SharedTrip.Core.Models.Comments;
@model ProfileViewModel

@{
    ViewData["Title"] = "My Profile";
}

<section style="background-color: #eee;">
    <input id="userId" type="hidden" value="@Model.Id" />
    <div class="container py-5">
        <div class="row">
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-body text-center">
                        <img src=@Model.ProfileImageUrl alt="avatar"
                             class="rounded-circle img-fluid" style="width: 150px;">
                        <h5 class="my-3">@Model.FirstName @Model.LastName</h5>
                        <div class="d-flex justify-content-center">
                            <p class="text-muted mb-1 mr-3">
                                <i class="fa-solid fa-person-walking-luggage"
                                   data-toggle="tooltip" data-placement="top" title="Count of trips as a passenger"></i>: @Model.CountOfTripsAsPassenger
                            </p>
                            <p class="text-muted mb-1">
                                <i class="fa-solid fa-car"
                                   data-toggle="tooltip" data-placement="top" title="Count of trips as a driver"></i>: @Model.CountOfTripsAsDriver
                            </p>
                        </div>
                        @if (ViewBag.CurrentUserId != Model.Id)
                        {
                            <div class="d-flex justify-content-center mb-2">
                                <a asp-controller="Message" asp-action="Chat" asp-route-userId="@Model.Id" class="btn btn-outline-primary ms-1">Message</a>
                            </div>
                        }
                    </div>
                </div>
                @if (ViewBag.CurrentUserId == Model.Id)
                {
                    <div class="widget user-dashboard-menu">
                        <ul>
                            <li>
                                <a asp-controller="Trip" asp-action="MyTrips"><i class="fa fa-user"></i> My Trips</a>
                            </li>
                            <li>
                                <a asp-controller="Car" asp-action="MyCars"><i class="fa-solid fa-car-on"></i> My Cars</a>
                            </li>
                            <li>
                                <a asp-controller="Car" asp-action="Create"><i class="fa-solid fa-car"></i> Create a Car</a>
                            </li>
                            <li>
                                <a asp-controller="User" asp-action="Edit"><i class="fa fa-cog"></i> Edit</a>
                            </li>
                            <li>
                                <a asp-controller="User" asp-action="Delete" data-toggle="modal" data-target="#deleteaccount"><i class="fa fa-power-off"></i>Delete Account</a>
                            </li>
                        </ul>
                    </div>
                }
            </div>
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-3">
                                <p class="mb-3" style="font-size:17px">Full Name</p>
                            </div>
                            <div class="col-sm-9">
                                <p class="text-muted mb-0" style="font-size:17px">@Model.FirstName @Model.LastName</p>
                            </div>
                        </div>
                        @if (ViewBag.CurrentUserId == Model.Id || User.IsInRole("Administrator"))
                        {
                            <div class="row">
                                <div class="col-sm-3">
                                    <p class="mb-3" style="font-size:17px">Email</p>
                                </div>
                                <div class="col-sm-9">
                                    <p class="text-muted mb-0" style="font-size:17px">@Model.Email</p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-sm-3">
                                    <p class="mb-3" style="font-size:17px">Phone Number</p>
                                </div>
                                <div class="col-sm-9">
                                    <p class="text-muted mb-0" style="font-size:17px">@Model.PhoneNumber</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
                <section class="content-item" id="comments">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-11" id="commentsDiv">
                                <form>
                                    <h3 class="pull-left">New Comment</h3>
                                    <fieldset>
                                        <div class="row">
                                            <div class="col-sm-3 col-lg-2 hidden-xs">
                                            </div>
                                            <div class="form-group commentSection">
                                                <textarea class="form-control" id="message" placeholder="Your comment" required=""></textarea>
                                            </div>
                                        </div>
                                    </fieldset>
                                    <a id="submitButton" class="btn btn btn-primary pull-right">Submit</a>
                                </form>

                                <h3>Comments</h3>

                                <ul id="commentsUl">
                                </ul>
                                <div class="row mb-5">
                                    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-start">
                                        <button class="btn btn-primary" id="previous">Previous</button>
                                    </div>

                                    <div class="col-md-6 d-grid gap-2 d-md-flex justify-content-md-end">
                                        <button class="btn btn-primary" id="next">Next</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
</section>

@section Scripts{
    <script>
        let currentPage = 1;

        let previousButton = document.getElementById('previous');

        previousButton.addEventListener('click', () => {
            if (!previousButton.classList.contains('disabled')) {
                currentPage -= 1;
                getComments(currentPage);
            }
        });

        let nextButton = document.getElementById('next');
        nextButton.addEventListener('click', () => {
            if (!nextButton.classList.contains('disabled')) {
                currentPage += 1;
                getComments(currentPage);
            }
        });

        const create = async function (e) {
            e.preventDefault;

            let textAreaElement = document.getElementById('message');

            if (textAreaElement.value.length > 0) {
                var model = {
                    creatorId: '@ViewBag.CurrentUserId',
                    receiverId: document.getElementById('userId').value,
                    createdOn: '@DateTime.UtcNow',
                    content: textAreaElement.value
                }

                fetch("/Comment/CreateComment", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'XSRF-TOKEN': getToken()
                    },
                    data: { __RequestVerificationToken: getToken() },
                    body: JSON.stringify(model)
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result == true) {
                            textAreaElement.value = '';
                            getComments();
                        }
                        else {
                            return;
                        }
                    })
            }
        }

        const getComments = async function (page) {
            const receiverId = "@Model.Id";

            const url = new URL('https://localhost:7164/Comment/GetComments');
            url.searchParams.append('receiverId', "@Model.Id");

            if (page != null) {
                url.searchParams.append('currentPage', page);
            }

            fetch(url, {
                method: "GET",
                headers: {
                    'Content-Type': 'application/json',
                    'XSRF-TOKEN': getToken()
                }
            })
                .then(response => response.json())
                .then(result => {
                    currentPage = result.currentPage

                    if (currentPage == 1) {
                        previousButton.classList.add('disabled');
                    }
                    else {
                        previousButton.classList.remove('disabled');
                    }

                    let maxPage = Math.ceil(parseFloat(result.totalCommentsCount) / parseInt('@AllCommentsQueryModel.CommentsPerPage'));

                    if (currentPage == maxPage) {
                        nextButton.classList.add('disabled');
                    }
                    else {
                        nextButton.classList.remove('disabled');
                    }

                    showComments(result.comments);
                });
        }

        const showComments = function (comments) {
            let commentsUl = document.getElementById('commentsUl');
            commentsUl.innerHTML = '';
            if (comments.length > 0) {
                comments.forEach(x => {
                    let liElement = document.createElement('li');
                    liElement.innerHTML = `<div class="media">
                                            <a class="pull-left" href="/User/Details?userId=${x.creatorId}"><img class="media-object" src="${x.creatorProfileImageUrl}" alt=""></a>
                                            <div class="media-body" id="${x.id}">
                                                    <h4 class="media-heading"><a href="/User/Details?userId=${x.creatorId}">${x.creatorName}</a></h4>
                                                    <p>${x.content}</p>
                                                    <ul class="list-unstyled list-inline media-detail pull-left">
                                                        <li><i class="fa fa-calendar"></i>${x.createdOn}</li>
                                                    </ul>
                                                </div>
                                            </div>`;
                    commentsUl.appendChild(liElement);

                    if(x.creatorId == '@ViewBag.CurrentUserId'){
                        var ul = document.createElement('ul');
                        ul.classList.add('list-unstyled');
                        ul.classList.add('list-inline');
                        ul.classList.add('media-detail');
                        ul.classList.add('pull-right');

                        let li = document.createElement('li');
                        li.innerHTML = `<button class='btn btn-light' style='padding: 5px 10px;' id=${x.id}">Delete</button>`;
                        
                        ul.appendChild(li);
                        document.getElementById(x.id).appendChild(ul);
                    }
                })
            }
            else {
                previousButton.classList.add('disabled');
                nextButton.classList.add('disabled');
            }
        }

        const getToken = function () {
            var token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        }

        const deleteComment = function (commentId){
            fetch("/Comment/Delete", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'XSRF-TOKEN': getToken()
                    },
                    data: { __RequestVerificationToken: getToken() },
                    body: JSON.stringify(commentId)
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result == true) {
                            getComments();
                        }
                        else {
                            return;
                        }
                    })
        };

        document.getElementById('commentsUl').addEventListener('click', (e) => {
            if(e.target.tagName == 'BUTTON' && e.target.textContent == 'Delete'){
                deleteComment(e.target.parentNode.parentNode.parentNode.id);
            }
        });

        let submitButton = document.getElementById('submitButton');
        submitButton.addEventListener('click', create);
        window.onload = getComments();
    </script>
}